{"ast":null,"code":"var _jsxFileName = \"/Users/joshfried/Downloads/Projects/React Apps/TicTacToe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null).map(() => Array(9).fill(null)));\n  const [bigboard, setBigBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [newBoard, setNewBoard] = useState(true);\n  const winner = calculateWinner(bigboard);\n  const [currentBoard, setcurrentBoard] = useState(10);\n  const [boardchose, setBoardChose] = useState(false);\n  const [isOverlayVisible, setOverlayVisible] = useState(false);\n  let status = \"\";\n  const handleClick = (index, i) => {\n    if (isOverlayVisible && index != currentBoard) return; //click in wrong square\n    if (winner || board[index][i] != null) return; //if there is a winner or square is already chosen\n    if (newBoard) {\n      //change to newBoard or something \n      chooseBoard(index);\n      return;\n    }\n    setcurrentBoard(i);\n    board[index][i] = xIsNext ? 'X' : 'O';\n    setXIsNext(!xIsNext);\n    bigboard[index] = calculateWinner(board[index]);\n    if (bigboard[index] != null) {\n      //changing the middle small board to the winner to display winner in big board\n      console.log(board[index][4]);\n      board[index][4] = bigboard[index];\n      console.log(board[index][4]);\n    }\n    if (bigboard[i] != null) {\n      setOverlayVisible(false);\n      setNewBoard(true);\n    }\n  };\n  const renderBigSquare = i => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: Array(3).fill(null).map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: Array(3).fill(null).map((_, col) => renderSquare(i, row * 3 + col))\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n  const renderSquare = (index, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `square ${isOverlayVisible ? 'overlay' : ''} ${currentBoard === index ? 'active' : ''} \n    ${board[index][i] == 'X' ? 'X' : ''} ${board[index][i] == 'O' ? 'O' : ''}\n    ${bigboard[index] == 'X' ? 'WinX' : ''} ${bigboard[index] == 'O' ? 'WinO' : ''}\n    ${bigboard[index] != null && i == 4 ? 'middle' : ''}`,\n    onClick: () => handleClick(index, i),\n    children: board[index][i]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n  const handleReset = () => {\n    setBoard(Array(9).fill(null).map(() => Array(9).fill(null)));\n    setBigBoard(Array(9).fill(null));\n    setXIsNext(true);\n    setNewBoard(true);\n    setOverlayVisible(false);\n    setcurrentBoard(10);\n  };\n  const renderBigBoard = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-bigboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: getStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Array(3).fill(null).map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: Array(3).fill(null).map((_, col) => renderBigSquare(row * 3 + col))\n        }, row, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"replay-button\",\n          onClick: handleReset,\n          children: \"Reset Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n  const chooseBoard = index => {\n    setcurrentBoard(index);\n    setOverlayVisible(true);\n    setBoardChose(true);\n    setNewBoard(false);\n  };\n  const getStatus = () => {\n    if (newBoard) {\n      status = `Choose a board: ${xIsNext ? 'X' : 'O'}`;\n      return status;\n    }\n    if (winner) {\n      status = `Winner: ${winner}`;\n    } else {\n      status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n    }\n    return status;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderBigBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tHHejVjn7giRXlkamSmRFogN+lA=\");\n_c = App;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nexport default App;\n\n// Order\n// 1. Render Board with \"Choose a Square for X\"\n// 2. X chooses a position\n// 3. Board changes based on X\n// 4. O chooses position\n// 5. Continue until someone wins a small board\n// 6. Make small board unplayable and have big X or O\n// 7. Continue\n// 8. If someone's position leads them to a finished small board then the player can chose a new board and play\n// 9. End when someone wins. \nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","map","bigboard","setBigBoard","xIsNext","setXIsNext","newBoard","setNewBoard","winner","calculateWinner","currentBoard","setcurrentBoard","boardchose","setBoardChose","isOverlayVisible","setOverlayVisible","status","handleClick","index","i","chooseBoard","console","log","renderBigSquare","className","children","_","row","col","renderSquare","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleReset","renderBigBoard","getStatus","_c","squares","lines","length","a","b","c","$RefreshReg$"],"sources":["/Users/joshfried/Downloads/Projects/React Apps/TicTacToe/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [board, setBoard] = useState(Array(9).fill(null).map(() => Array(9).fill(null)));\n  const [bigboard, setBigBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [newBoard, setNewBoard] = useState(true);\n  const winner = calculateWinner(bigboard);\n  const [currentBoard, setcurrentBoard] = useState(10);\n  const [boardchose, setBoardChose] = useState(false);\n  const [isOverlayVisible, setOverlayVisible] = useState(false);\n  let status = \"\";\n\n  const handleClick = (index, i) => {\n    if(isOverlayVisible && index != currentBoard) return; //click in wrong square\n    if (winner || board[index][i] != null) return; //if there is a winner or square is already chosen\n    if(newBoard){ //change to newBoard or something \n      chooseBoard(index);\n      return;\n    }\n    setcurrentBoard(i);\n    board[index][i] = xIsNext ? 'X' : 'O';\n    setXIsNext(!xIsNext);\n\n    bigboard[index] = calculateWinner(board[index]);\n    if(bigboard[index] != null){ //changing the middle small board to the winner to display winner in big board\n      console.log(board[index][4]);\n      board[index][4] = bigboard[index];\n      console.log(board[index][4]);\n    }\n    if(bigboard[i] != null){\n      setOverlayVisible(false);\n      setNewBoard(true);\n    }\n  };\n\n  const renderBigSquare = (i) => (\n    <div className='board'>\n      {Array(3)\n        .fill(null)\n        .map((_, row) => (\n          <div key={row} className=\"board-row\">\n            {Array(3)\n              .fill(null)\n              .map((_, col) => renderSquare(i, row * 3 + col))}\n          </div>\n        ))}\n      </div>\n  );\n\n  const renderSquare = (index, i) => (\n    <button className={`square ${isOverlayVisible ? 'overlay' : ''} ${currentBoard === index ? 'active' : ''} \n    ${board[index][i] == 'X' ? 'X' : ''} ${board[index][i] == 'O' ? 'O' : ''}\n    ${bigboard[index] == 'X' ? 'WinX' : ''} ${bigboard[index] == 'O' ? 'WinO' : ''}\n    ${bigboard[index] != null && i == 4 ? 'middle' : ''}`} \n    onClick={() => handleClick(index, i)}>\n      {board[index][i]}\n    </button>\n  );\n\n  const handleReset = () => {\n    setBoard(Array(9).fill(null).map(() => Array(9).fill(null)));\n    setBigBoard(Array(9).fill(null));\n    setXIsNext(true);\n    setNewBoard(true);\n    setOverlayVisible(false);\n    setcurrentBoard(10);\n  };\n\n  const renderBigBoard = () => (\n    <div className=\"game\">\n      <div className=\"game-bigboard\">\n        <div className=\"status\">{getStatus()}</div>\n        <div> \n          {Array(3) \n            .fill(null)\n            .map((_, row) => (\n              <div key={row} className=\"board-row\">\n                {Array(3)\n                  .fill(null)\n                  .map((_, col) => renderBigSquare(row * 3 + col))}\n              </div>\n            ))}\n            <button className=\"replay-button\" onClick={handleReset}>\n              Reset Board\n            </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  const chooseBoard = (index) => {\n    setcurrentBoard(index);\n    setOverlayVisible(true);\n    setBoardChose(true);\n    setNewBoard(false);\n  };\n\n  const getStatus = () => {\n    if(newBoard){\n      status = `Choose a board: ${xIsNext ? 'X' : 'O'}`;\n      return status;\n    }\n    if(winner){\n      status = `Winner: ${winner}`;\n    } else {\n      status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n    }\n    return status;\n  };\n\n  return (\n    <div>\n      {renderBigBoard()}\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nexport default App;\n\n\n// Order\n// 1. Render Board with \"Choose a Square for X\"\n// 2. X chooses a position\n// 3. Board changes based on X\n// 4. O chooses position\n// 5. Continue until someone wins a small board\n// 6. Make small board unplayable and have big X or O\n// 7. Continue\n// 8. If someone's position leads them to a finished small board then the player can chose a new board and play\n// 9. End when someone wins. "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}