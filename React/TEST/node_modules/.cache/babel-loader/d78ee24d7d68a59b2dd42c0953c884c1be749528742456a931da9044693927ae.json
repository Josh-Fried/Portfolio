{"ast":null,"code":"var _jsxFileName = \"/Users/joshfried/Downloads/Projects/React Apps/TicTacToe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\n\n// function App() {\n// const [board, setBoard] = useState(Array(9).fill(null));\n//   const [bigboard, setBigBoard] = useState(Array(9).fill(null));\n// const [xIsNext, setXIsNext] = useState(true);\n// const winner = calculateWinner(board);\n\n// const handleClick = (i) => {\n//   const squares = [...board];\n//   if (winner || squares[i]) return;\n\n//   squares[i] = xIsNext ? 'X' : 'O';\n//   setBoard(squares);\n//   setXIsNext(!xIsNext);\n// };\n\n// const renderSquare = (i) => (\n//   <button className=\"square\" onClick={() => handleClick(i)}>\n//     {board[i]}\n//   </button>\n// );\n\n//   const handleReplay = () => {\n//     setBoard(Array(9).fill(null));\n//     setXIsNext(true);\n//   };\n\n//   const status = winner\n//     ? `Winner: ${winner}`\n//     : `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n// return (\n//   <div className=\"game\">\n//     <div className=\"game-board\">\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board\">\n//         {Array(3)\n//           .fill(null)\n//           .map((_, row) => (\n//             <div key={row} className=\"board-row\">\n//               {Array(3)\n//                 .fill(null)\n//                 .map((_, col) => renderSquare(row * 3 + col))}\n//             </div>\n//           ))}\n//       </div>\n//       <button className=\"replay-button\" onClick={handleReplay}>\n//         Replay\n//       </button>\n//     </div>\n//   </div>\n// );\n// }\n\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6],\n//   ];\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n\n//   return null;\n// }\n\n// export default App;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  // const winner = calculateWinner(board);\n\n  const handleClick = i => {\n    const squares = [...board];\n    // if (winner || squares[i]) return;\n\n    squares[i] = xIsNext ? 'X' : 'O';\n    setBoard(squares);\n    setXIsNext(!xIsNext);\n  };\n  const renderSquare = i => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: () => handleClick(i),\n    children: board[i]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n\n  // Define an array to represent the big Tic Tac Toe board\n  const bigBoard = Array(3).fill(null).map(() => Array(3).fill(null).map(() => Array(3).fill(null)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"big-board\",\n      children: bigBoard.map((bigRow, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"big-board-row\",\n        children: bigRow.map((smallBoardRow, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"big-board-col\",\n          children: smallBoardRow.map((smallBoard, squareIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small-board\",\n            children: smallBoard.map((square, innerSquareIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"square\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"game-board\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"board\",\n                    children: Array(3).fill(null).map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"board-row\",\n                      children: Array(3).fill(null).map((_, col) => renderSquare(row * 3 + col))\n                    }, row, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 126,\n                      columnNumber: 35\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 25\n              }, this)\n            }, innerSquareIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 23\n            }, this))\n          }, squareIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 19\n          }, this))\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"znBF1eYeJNOReqN4BeETvwkOe4A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","xIsNext","setXIsNext","handleClick","i","squares","renderSquare","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","bigBoard","map","bigRow","rowIndex","smallBoardRow","colIndex","smallBoard","squareIndex","square","innerSquareIndex","_","row","col","_c","$RefreshReg$"],"sources":["/Users/joshfried/Downloads/Projects/React Apps/TicTacToe/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// function App() {\n  // const [board, setBoard] = useState(Array(9).fill(null));\n//   const [bigboard, setBigBoard] = useState(Array(9).fill(null));\n  // const [xIsNext, setXIsNext] = useState(true);\n  // const winner = calculateWinner(board);\n\n  // const handleClick = (i) => {\n  //   const squares = [...board];\n  //   if (winner || squares[i]) return;\n\n  //   squares[i] = xIsNext ? 'X' : 'O';\n  //   setBoard(squares);\n  //   setXIsNext(!xIsNext);\n  // };\n\n  // const renderSquare = (i) => (\n  //   <button className=\"square\" onClick={() => handleClick(i)}>\n  //     {board[i]}\n  //   </button>\n  // );\n\n//   const handleReplay = () => {\n//     setBoard(Array(9).fill(null));\n//     setXIsNext(true);\n//   };\n\n//   const status = winner\n//     ? `Winner: ${winner}`\n//     : `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  // return (\n  //   <div className=\"game\">\n  //     <div className=\"game-board\">\n  //       <div className=\"status\">{status}</div>\n  //       <div className=\"board\">\n  //         {Array(3)\n  //           .fill(null)\n  //           .map((_, row) => (\n  //             <div key={row} className=\"board-row\">\n  //               {Array(3)\n  //                 .fill(null)\n  //                 .map((_, col) => renderSquare(row * 3 + col))}\n  //             </div>\n  //           ))}\n  //       </div>\n  //       <button className=\"replay-button\" onClick={handleReplay}>\n  //         Replay\n  //       </button>\n  //     </div>\n  //   </div>\n  // );\n// }\n\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6],\n//   ];\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n\n//   return null;\n// }\n\n// export default App;\n\nfunction App() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  // const winner = calculateWinner(board);\n\n  const handleClick = (i) => {\n    const squares = [...board];\n    // if (winner || squares[i]) return;\n\n    squares[i] = xIsNext ? 'X' : 'O';\n    setBoard(squares);\n    setXIsNext(!xIsNext);\n  };\n\n  const renderSquare = (i) => (\n    <button className=\"square\" onClick={() => handleClick(i)}>\n      {board[i]}\n    </button>\n  );\n\n  // Define an array to represent the big Tic Tac Toe board\n  const bigBoard = Array(3).fill(null).map(() =>\n    Array(3).fill(null).map(() => Array(3).fill(null))\n  );\n\n  return (\n    <div className=\"game\">\n      <div className=\"big-board\">\n        {bigBoard.map((bigRow, rowIndex) => (\n          <div key={rowIndex} className=\"big-board-row\">\n            {bigRow.map((smallBoardRow, colIndex) => (\n              <div key={colIndex} className=\"big-board-col\">\n                {smallBoardRow.map((smallBoard, squareIndex) => (\n                  <div key={squareIndex} className=\"small-board\">\n                    {smallBoard.map((square, innerSquareIndex) => (\n                      <div key={innerSquareIndex} className=\"square\">\n                        {/* Render each square of the small Tic Tac Toe board */}\n                        {/* You can add X or O here as needed */}\n                        <div className=\"game\">\n                          <div className=\"game-board\">\n                            {/* <div className=\"status\">{status}</div> */}\n                            <div className=\"board\">\n                              {Array(3)\n                                .fill(null)\n                                .map((_, row) => (\n                                  <div key={row} className=\"board-row\">\n                                    {Array(3)\n                                      .fill(null)\n                                      .map((_, col) => renderSquare(row * 3 + col))}\n                                  </div>\n                                ))}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}