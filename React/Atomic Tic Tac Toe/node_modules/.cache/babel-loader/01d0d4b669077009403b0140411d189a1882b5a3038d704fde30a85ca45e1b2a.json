{"ast":null,"code":"var _jsxFileName = \"/Users/joshfried/Downloads/Projects/React Apps/TicTacToe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null).map(() => Array(9).fill(null)));\n  const [bigboard, setBigBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [start, setStart] = useState(true);\n  const winner = calculateBigWinner(bigboard);\n  const [playBoard, setPlayBoard] = useState(0);\n  const [boardchose, setBoardChose] = useState(false);\n  const [isOverlayVisible1, setOverlayVisible1] = useState(false);\n  const [isOverlayVisible2, setOverlayVisible2] = useState(true);\n  const [isOverlayVisible3, setOverlayVisible3] = useState(false);\n  const [isOverlayVisible4, setOverlayVisible4] = useState(false);\n  const [isOverlayVisible5, setOverlayVisible5] = useState(false);\n  const [isOverlayVisible6, setOverlayVisible6] = useState(false);\n  const [isOverlayVisible7, setOverlayVisible7] = useState(false);\n  const [isOverlayVisible8, setOverlayVisible8] = useState(false);\n  let status = \"\";\n  const handleClick = (index, i) => {\n    // Log the values of i and index\n    console.log('i:', i, 'index:', index);\n    if (isOverlayVisible1) return;\n    if (winner || board[index][i] != null) return; //if there is a winner or square is already chosen\n\n    board[index][i] = xIsNext ? 'X' : 'O';\n    console.log(\"Next: \", xIsNext ? 'X' : 'O');\n    setXIsNext(!xIsNext);\n  };\n  const handleBigClick = i => {\n    // needs to dim the other squares and only let the player play on the right square\n  };\n  const dimOtherBoards = () => {};\n  const renderSmallBoard = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"bigsquare\",\n    onClick: dimOtherBoards\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n  const renderBigSquare = i => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `board ${isOverlayVisible1 ? 'overlay' : ''} ${isOverlayVisible2 ? 'overlay' : ''} ${isOverlayVisible3 ? 'overlay' : ''} ${isOverlayVisible4 ? 'overlay' : ''} \n    ${isOverlayVisible5 ? 'overlay' : ''} ${isOverlayVisible6 ? 'overlay' : ''} ${isOverlayVisible7 ? 'overlay' : ''} ${isOverlayVisible8 ? 'overlay' : ''}`,\n    children: Array(3).fill(null).map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: Array(3).fill(null).map((_, col) => renderSquare(i, row * 3 + col))\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n  const renderSquare = (index, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: () => handleClick(index, i),\n    children: board[index][i]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n  const handleReset = () => {\n    // setBoard(Array(9).fill(null));\n    //setBoard(Array(9).fill(Array(9).fill(null)));\n    setBoard(Array(9).fill(null).map(() => Array(9).fill(null)));\n    setXIsNext(true);\n    setStart(true);\n  };\n  const renderBigBoard = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-bigboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: getStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [Array(3).fill(null).map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: Array(3).fill(null).map((_, col) => renderBigSquare(row * 3 + col))\n        }, row, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"replay-button\",\n          onClick: handleReset,\n          children: \"Reset Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n  const chooseBoard = () => {\n    // if button pressed then ... \n    setBoardChose(true);\n  };\n  const startGame = () => {\n    if (start) {\n      console.log(\"Start\", status);\n      //status = \"Choose a Board\";\n      console.log(\"Start\", status);\n      // while(!boardchose){\n      //   chooseBoard();\n      // }\n\n      setStart(false);\n    }\n  };\n  const getStatus = () => {\n    if (start) {\n      status = \"Choose a board: ${xIsNext ? 'X' : 'O'}\";\n      return status;\n    }\n    if (winner) {\n      status = `Winner: ${winner}`;\n    } else {\n      status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n    }\n    return status;\n  };\n  console.log(board);\n  console.log(bigboard);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [startGame(), renderBigBoard()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J/G+u02W4kbeOr11WE5ikCUUUYs=\");\n_c = App;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nfunction calculateBigWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nexport default App;\n\n// Order\n// 1. Render Board with \"Choose a Square for X\"\n// 2. X chooses a position\n// 3. Board changes based on X\n// 4. O chooses position\n// 5. Continue until someone wins a small board\n// 6. Make small board unplayable and have big X or O\n// 7. Continue\n// 8. If someone's position leads them to a finished small board then the player can chose a new board and play\n// 9. End when someone wins. \nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","map","bigboard","setBigBoard","xIsNext","setXIsNext","start","setStart","winner","calculateBigWinner","playBoard","setPlayBoard","boardchose","setBoardChose","isOverlayVisible1","setOverlayVisible1","isOverlayVisible2","setOverlayVisible2","isOverlayVisible3","setOverlayVisible3","isOverlayVisible4","setOverlayVisible4","isOverlayVisible5","setOverlayVisible5","isOverlayVisible6","setOverlayVisible6","isOverlayVisible7","setOverlayVisible7","isOverlayVisible8","setOverlayVisible8","status","handleClick","index","i","console","log","handleBigClick","dimOtherBoards","renderSmallBoard","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderBigSquare","children","_","row","col","renderSquare","handleReset","renderBigBoard","getStatus","chooseBoard","startGame","_c","calculateWinner","squares","lines","length","a","b","c","$RefreshReg$"],"sources":["/Users/joshfried/Downloads/Projects/React Apps/TicTacToe/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [board, setBoard] = useState(Array(9).fill(null).map(() => Array(9).fill(null)));\n  const [bigboard, setBigBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [start, setStart] = useState(true);\n  const winner = calculateBigWinner(bigboard);\n  const [playBoard, setPlayBoard] = useState(0);\n  const [boardchose, setBoardChose] = useState(false);\n  const [isOverlayVisible1, setOverlayVisible1] = useState(false);\n  const [isOverlayVisible2, setOverlayVisible2] = useState(true);\n  const [isOverlayVisible3, setOverlayVisible3] = useState(false);\n  const [isOverlayVisible4, setOverlayVisible4] = useState(false);\n  const [isOverlayVisible5, setOverlayVisible5] = useState(false);\n  const [isOverlayVisible6, setOverlayVisible6] = useState(false);\n  const [isOverlayVisible7, setOverlayVisible7] = useState(false);\n  const [isOverlayVisible8, setOverlayVisible8] = useState(false);\n  let status = \"\";\n\n  const handleClick = (index, i) => {\n    // Log the values of i and index\n    console.log('i:', i, 'index:', index);\n    if(isOverlayVisible1) return;\n  \n    if (winner || board[index][i] != null) return; //if there is a winner or square is already chosen\n  \n    board[index][i] = xIsNext ? 'X' : 'O';\n    console.log(\"Next: \", xIsNext ? 'X' : 'O');\n    setXIsNext(!xIsNext);\n  };\n\n  const handleBigClick = (i) => {\n    // needs to dim the other squares and only let the player play on the right square\n    \n  };\n\n  const dimOtherBoards = () => {\n  \n  };\n\n  const renderSmallBoard = () => (\n    <button className='bigsquare' onClick={dimOtherBoards}>\n    </button>\n  );\n\n  const renderBigSquare = (i) => (\n    <div className={`board ${isOverlayVisible1 ? 'overlay' : ''} ${isOverlayVisible2 ? 'overlay' : ''} ${isOverlayVisible3 ? 'overlay' : ''} ${isOverlayVisible4 ? 'overlay' : ''} \n    ${isOverlayVisible5 ? 'overlay' : ''} ${isOverlayVisible6 ? 'overlay' : ''} ${isOverlayVisible7 ? 'overlay' : ''} ${isOverlayVisible8 ? 'overlay' : ''}`}>\n      {/* {renderSmallBoard()} */}\n      {Array(3)\n        .fill(null)\n        .map((_, row) => (\n          <div key={row} className=\"board-row\">\n            {Array(3)\n              .fill(null)\n              .map((_, col) => renderSquare(i, row * 3 + col))}\n          </div>\n        ))}\n      </div>\n  );\n\n  const renderSquare = (index, i) => (\n    <button className=\"square\" onClick={() => handleClick(index, i)}>\n      {board[index][i]}\n    </button>\n  );\n\n  const handleReset = () => {\n    // setBoard(Array(9).fill(null));\n    //setBoard(Array(9).fill(Array(9).fill(null)));\n    setBoard(Array(9).fill(null).map(() => Array(9).fill(null)));\n    setXIsNext(true);\n    setStart(true);\n  };\n\n  const renderBigBoard = () => (\n    <div className=\"game\">\n      <div className=\"game-bigboard\">\n        <div className=\"status\">{getStatus()}</div>\n        <div> \n          {Array(3) \n            .fill(null)\n            .map((_, row) => (\n              <div key={row} className=\"board-row\">\n                {Array(3)\n                  .fill(null)\n                  .map((_, col) => renderBigSquare(row * 3 + col))}\n              </div>\n            ))}\n            <button className=\"replay-button\" onClick={handleReset}>\n              Reset Board\n            </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  const chooseBoard = () => {\n    // if button pressed then ... \n    setBoardChose(true);\n  };\n\n  const startGame = () =>{   \n     if(start){\n      console.log(\"Start\", status);\n      //status = \"Choose a Board\";\n      console.log(\"Start\", status);\n      // while(!boardchose){\n      //   chooseBoard();\n      // }\n      \n      setStart(false);\n    }\n  };\n\n  const getStatus = () => {\n    if(start){\n      status = \"Choose a board: ${xIsNext ? 'X' : 'O'}\";\n      return status;\n    }\n    if(winner){\n      status = `Winner: ${winner}`;\n    } else {\n      status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n    }\n\n    return status;\n  };\n  \n    console.log(board);\n    console.log(bigboard);\n\n  return (\n    <div>\n      {startGame()}\n      {renderBigBoard()}\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction calculateBigWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nexport default App;\n\n\n// Order\n// 1. Render Board with \"Choose a Square for X\"\n// 2. X chooses a position\n// 3. Board changes based on X\n// 4. O chooses position\n// 5. Continue until someone wins a small board\n// 6. Make small board unplayable and have big X or O\n// 7. Continue\n// 8. If someone's position leads them to a finished small board then the player can chose a new board and play\n// 9. End when someone wins. "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}